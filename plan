RAII style

- upper level atomic/pthread/lock

scoped_lock(rcu, mutex, ...) framework
debug framework

thread framework
struct thread_info {
    void *init();
    void *work();
}

work(){
    init();
    barrier();
    self_work();
}

simple rcu ---------------- v
workqueue ----------------- v
thread -------------------- v
scoped_lock --------------- v

RAII object
taskflow
mlrcu
hazard pointer
concurrent linked list
** hash table
receiver and sender
softirq: signal (with the task) to workqueue thread?

---

basic container - hash table
    - hash function crc32c
    - table[NR_xx]->linked_list
        - recycle: simple rcu + workqueue
    => related: linked list, workqueue, simple rcu (async)
    - Safe object
        - refcount

debug framework
    - print, macro
    - thread framework
        - centralized barrier
        - workqueue: (auto join)
